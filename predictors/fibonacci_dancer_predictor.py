class FibonacciDancerPredictor:
    """
    Mevcut el sayÄ±sÄ±nÄ±n (Tie'lar hariÃ§) bir Fibonacci sayÄ±sÄ±na
    denk gelip gelmediÄŸine gÃ¶re tahmin yapan model.
    Fibonacci sayÄ±larÄ±nda 'Ã¶zel' bir tahmin (Ã¶rn: son elin tersi),
    diÄŸer ellerde 'normal' bir tahmin (Ã¶rn: son eli tekrar et) yapar.
    """

    def __init__(self, max_fib_check=100):
        # Kontrol edilecek maksimum el sayÄ±sÄ± iÃ§in Fibonacci sayÄ±larÄ±nÄ± Ã¼ret
        self.fibonacci_numbers = self._generate_fibonacci_up_to(max_fib_check)
        # print(f"Fibonacci numbers to check: {self.fibonacci_numbers}") # Debug

    def _generate_fibonacci_up_to(self, limit):
        """Belirtilen limite kadar olan Fibonacci sayÄ±larÄ±nÄ± iÃ§eren bir set dÃ¶ndÃ¼rÃ¼r."""
        fib_set = set()
        a, b = 0, 1
        while b <= limit: # Limit dahil
            fib_set.add(b)
            a, b = b, a + b
        # Genellikle Baccarat'ta ilk el Ã¶nemli sayÄ±lmaz ama 1'i ekleyelim
        if 1 not in fib_set:
             fib_set.add(1)
        return fib_set

    def predict(self, history: list) -> str:
        """
        Mevcut P/B el sayÄ±sÄ±nÄ±n Fibonacci olup olmadÄ±ÄŸÄ±na gÃ¶re tahmin yapar.
        """
        relevant_history = [res for res in history if res in ('P', 'B')]
        current_hand_number = len(relevant_history) # Mevcut el sayÄ±sÄ± (0'dan deÄŸil, 1'den baÅŸlar gibi dÃ¼ÅŸÃ¼nelim)

        # Tahmin iÃ§in en az 1 Ã¶nceki el gerekli
        if current_hand_number < 1:
            return "N/A"

        last_result = relevant_history[-1]

        # Mevcut el sayÄ±sÄ± (bir sonraki elin numarasÄ±) Fibonacci mi?
        # Dikkat: Tahmin ettiÄŸimiz el, mevcut el sayÄ±sÄ±nÄ±n +1'i olacak.
        next_hand_number = current_hand_number + 1

        if next_hand_number in self.fibonacci_numbers:
            # Fibonacci GÃ¼nÃ¼! Ã–zel tahmin: Son elin tersini alalÄ±m (keyfi seÃ§im)
            # print(f"Fibonacci Hand ({next_hand_number})! Predicting opposite of {last_result}") # Debug
            return 'B' if last_result == 'P' else 'P'
        else:
            # Normal gÃ¼n. Normal tahmin: Son eli tekrar edelim (keyfi seÃ§im)
            # print(f"Normal Hand ({next_hand_number}). Predicting same as {last_result}") # Debug
            return last_result

    def get_confidence(self, history: list) -> float:
        """Tahminin gÃ¼ven oranÄ±nÄ± dÃ¶ndÃ¼rÃ¼r."""
        prediction = self.predict(history)
        if prediction == "N/A":
            return 0.0

        relevant_history = [res for res in history if res in ('P', 'B')]
        current_hand_number = len(relevant_history)
        next_hand_number = current_hand_number + 1

        # Fibonacci ellerinde gÃ¼ven biraz daha yÃ¼ksek olsun (mistik gÃ¼Ã§! ğŸ˜„)
        if next_hand_number in self.fibonacci_numbers:
            return 60.0
        else:
            # Normal ellerde daha standart bir gÃ¼ven
            return 45.0

    def get_probability(self, history: list) -> float:
        """Tahminin gerÃ§ekleÅŸme olasÄ±lÄ±ÄŸÄ±nÄ± dÃ¶ndÃ¼rÃ¼r."""
        prediction = self.predict(history)
        if prediction == "N/A":
            return 0.0

        # Fibonacci'nin gerÃ§ek bir etkisi olmadÄ±ÄŸÄ± varsayÄ±mÄ±yla, %50'ye yakÄ±n tutalÄ±m.
        # GÃ¼ven gibi hafif bir ayrÄ±m yapabiliriz.
        relevant_history = [res for res in history if res in ('P', 'B')]
        current_hand_number = len(relevant_history)
        next_hand_number = current_hand_number + 1

        if next_hand_number in self.fibonacci_numbers:
            return 52.0 # HafifÃ§e yÃ¼ksek
        else:
            return 48.0 # HafifÃ§e dÃ¼ÅŸÃ¼k
